// Code generated by protoc-gen-go.
// source: proto/post/post.proto
// DO NOT EDIT!

/*
Package go_micors_srv_post is a generated protocol buffer package.

It is generated from these files:
	proto/post/post.proto

It has these top-level messages:
	Post
	ListRequest
	GetRequest
	Response
*/
package go_micors_srv_post

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Post struct {
	Id     int64  `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	Title  string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Post) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Post) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Post) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Post) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetRequest struct {
	PostID int64 `protobuf:"varint,1,opt,name=PostID,json=postID" json:"PostID,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetPostID() int64 {
	if m != nil {
		return m.PostID
	}
	return 0
}

type Response struct {
	Status bool    `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Post   *Post   `protobuf:"bytes,2,opt,name=post" json:"post,omitempty"`
	Posts  []*Post `protobuf:"bytes,3,rep,name=posts" json:"posts,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *Response) GetPost() *Post {
	if m != nil {
		return m.Post
	}
	return nil
}

func (m *Response) GetPosts() []*Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

func init() {
	proto.RegisterType((*Post)(nil), "go.micors.srv.post.Post")
	proto.RegisterType((*ListRequest)(nil), "go.micors.srv.post.ListRequest")
	proto.RegisterType((*GetRequest)(nil), "go.micors.srv.post.GetRequest")
	proto.RegisterType((*Response)(nil), "go.micors.srv.post.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PostService service

type PostServiceClient interface {
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Response, error)
	ListPosts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	GetPost(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
}

type postServiceClient struct {
	cc *grpc.ClientConn
}

func NewPostServiceClient(cc *grpc.ClientConn) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/go.micors.srv.post.PostService/CreatePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ListPosts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/go.micors.srv.post.PostService/ListPosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPost(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/go.micors.srv.post.PostService/GetPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostService service

type PostServiceServer interface {
	CreatePost(context.Context, *Post) (*Response, error)
	ListPosts(context.Context, *ListRequest) (*Response, error)
	GetPost(context.Context, *GetRequest) (*Response, error)
}

func RegisterPostServiceServer(s *grpc.Server, srv PostServiceServer) {
	s.RegisterService(&_PostService_serviceDesc, srv)
}

func _PostService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micors.srv.post.PostService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ListPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ListPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micors.srv.post.PostService/ListPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ListPosts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micors.srv.post.PostService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPost(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micors.srv.post.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostService_CreatePost_Handler,
		},
		{
			MethodName: "ListPosts",
			Handler:    _PostService_ListPosts_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _PostService_GetPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/post/post.proto",
}

func init() { proto.RegisterFile("proto/post/post.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0xff, 0x69, 0xd2, 0xfe, 0xdb, 0x29, 0x7a, 0x18, 0x54, 0x16, 0x11, 0x2d, 0xc1, 0x43,
	0x0f, 0xb2, 0x42, 0x7d, 0x04, 0xc5, 0x52, 0xe8, 0x41, 0xd6, 0x8b, 0xd7, 0xda, 0x0e, 0xba, 0xa0,
	0x6e, 0xdc, 0x99, 0x14, 0x8f, 0x3e, 0xb1, 0xcf, 0x20, 0x3b, 0x6d, 0x51, 0x30, 0xda, 0x4b, 0x92,
	0x6f, 0xe6, 0x37, 0x5f, 0x76, 0x3e, 0x16, 0xf6, 0xab, 0x18, 0x24, 0x9c, 0x57, 0x81, 0x45, 0x1f,
	0x56, 0x35, 0xe2, 0x43, 0xb0, 0xcf, 0x7e, 0x1e, 0x22, 0x5b, 0x8e, 0x4b, 0x9b, 0x3a, 0xe5, 0x1d,
	0x14, 0x37, 0x81, 0x05, 0x77, 0xa1, 0xe5, 0x17, 0xa6, 0x18, 0x64, 0xc3, 0xdc, 0xb5, 0xfc, 0x02,
	0xf7, 0xa0, 0x2d, 0x5e, 0x9e, 0xc8, 0x64, 0x83, 0x6c, 0xd8, 0x73, 0x2b, 0x81, 0x08, 0x85, 0xd0,
	0x9b, 0x98, 0x96, 0x16, 0xf5, 0x1b, 0x0f, 0xa0, 0x33, 0xab, 0xe5, 0x31, 0x44, 0x93, 0x6b, 0x75,
	0xad, 0xca, 0x1d, 0xe8, 0x4f, 0x3d, 0x8b, 0xa3, 0xd7, 0x9a, 0x58, 0xca, 0x53, 0x80, 0x31, 0x6d,
	0x54, 0x1a, 0x4a, 0xbf, 0x9d, 0x5c, 0xa9, 0x7f, 0xee, 0x3a, 0x95, 0xaa, 0xf2, 0x3d, 0x83, 0xae,
	0x23, 0xae, 0xc2, 0x0b, 0x53, 0x82, 0x58, 0x66, 0x52, 0xb3, 0x42, 0x5d, 0xb7, 0x56, 0x78, 0x06,
	0x45, 0xc2, 0xf5, 0x14, 0xfd, 0x91, 0xb1, 0x3f, 0xd7, 0xb2, 0xc9, 0xdc, 0x29, 0x85, 0x16, 0xda,
	0xe9, 0xcd, 0x26, 0x1f, 0xe4, 0x7f, 0xe2, 0x2b, 0x6c, 0xf4, 0x91, 0x41, 0x3f, 0xe9, 0x5b, 0x8a,
	0x4b, 0x3f, 0x27, 0xbc, 0x06, 0xb8, 0x8c, 0x34, 0x13, 0xd2, 0x9c, 0x7e, 0x1d, 0x3f, 0x3c, 0x6a,
	0xea, 0x6c, 0x76, 0x29, 0xff, 0xe1, 0x14, 0x7a, 0x29, 0x8f, 0xc4, 0x32, 0x9e, 0x34, 0xc1, 0xdf,
	0xe2, 0xda, 0xea, 0x36, 0x81, 0xff, 0x63, 0x52, 0x33, 0x3c, 0x6e, 0x42, 0xbf, 0xb2, 0xde, 0x66,
	0x75, 0xdf, 0xd1, 0xdb, 0x71, 0xf1, 0x19, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x48, 0xa4, 0xc5, 0x36,
	0x02, 0x00, 0x00,
}
